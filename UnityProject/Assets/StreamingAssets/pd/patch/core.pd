#N canvas 1177 364 831 596 10;
#X obj 317 89 inlet~;
#X obj 37 170 spectrum \$1;
#X obj 40 249 table fft_\$1 512;
#X obj 39 192 r shmemupdate;
#X obj 39 225 shmem fft_\$1 512;
#X obj 150 249 table wave_\$1 512;
#X obj 152 225 shmem wave_\$1 512;
#X obj 152 172 tabwrite~ wave_\$1;
#N canvas 0 50 450 528 timberID 0;
#X obj 149 212 timbreID;
#N canvas 507 196 745 433 onsets 0;
#X obj 56 53 inlet~;
#X obj 146 327 outlet;
#X obj 3 4 cnv 10 400 10 empty empty empty 20 12 0 14 -233017 -66577
0;
#X obj 3 4 cnv 10 10 400 empty empty empty 20 12 0 14 -233017 -66577
0;
#X obj 178 173 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 171 96 r bark-settings;
#X text 308 53 timbreID comes with its own onset detection object:
bark~. See its helpfile for more details. In comparison with bonk~
(the usual onset detection object in Pd) \, bark~ performs very similarly
but has several extra conveniences. Most importantly \, there is a
non-real-time version of the object \, enabling easy parsing of pre-recorded
audio.;
#X obj 146 135 bark~ 1024 256 0.5;
#X obj 336 292 loadbang;
#X msg 336 314 \; bark-settings minvel 15 \; bark-settings debounce
350 \; bark-settings thresh 5 12 \; bark-settings filter_range 20 49
\;;
#X obj 56 385 outlet~;
#X text 308 163 Doing the attack detection in a subpatch with the input
signal connected in series before [bfcc~] guarantees the DSP order.
We first analyze the signal with [bark~] here to look for attacks \,
and if we find one \, spit out a bang to get the most recent BFCC analysis
possible back in the parent patch.;
#X text 558 321 These were good onset detection settings for the audio
files used in this help file., f 22;
#X connect 0 0 7 0;
#X connect 0 0 10 0;
#X connect 5 0 7 0;
#X connect 7 0 4 0;
#X connect 7 0 1 0;
#X connect 8 0 9 0;
#X restore 170 75 pd onsets;
#X obj 171 124 bfcc~ 1024 0.5;
#X obj 171 146 list split 25;
#X obj 42 116 loadbang;
#X msg 42 144 read trained.timid;
#X obj 55 252 loadbang;
#X obj 55 281 f \$1, f 6;
#X obj 55 306 + 160;
#X obj 164 265 * 64;
#X obj 164 288 clip 0 127;
#X obj 106 296 t b f;
#X obj 107 455 s netsend;
#X obj 164 327 i;
#X obj 107 368 pack 0 0 0;
#X obj 88 342 f;
#X obj 107 395 list prepend send;
#X obj 107 426 list trim;
#X obj 171 41 inlet~;
#X connect 0 0 11 0;
#X connect 0 1 9 0;
#X connect 1 0 2 0;
#X connect 1 1 2 0;
#X connect 2 0 3 0;
#X connect 3 0 0 1;
#X connect 4 0 5 0;
#X connect 5 0 0 0;
#X connect 6 0 7 0;
#X connect 7 0 8 0;
#X connect 8 0 15 1;
#X connect 9 0 10 0;
#X connect 10 0 13 0;
#X connect 11 0 15 0;
#X connect 11 1 14 1;
#X connect 13 0 14 2;
#X connect 14 0 16 0;
#X connect 15 0 14 0;
#X connect 16 0 17 0;
#X connect 17 0 12 0;
#X connect 18 0 1 0;
#X restore 276 169 pd timberID;
#X obj 152 195 r shmemupdate;
#N canvas 1434 654 450 271 level 0;
#X obj 113 172 tabwrite level;
#X obj 194 120 loadbang;
#X obj 194 145 f \$1, f 6;
#X obj 113 94 env~ 1024 512;
#X obj 114 44 inlet~;
#X connect 1 0 2 0;
#X connect 2 0 0 1;
#X connect 3 0 0 0;
#X connect 4 0 3 0;
#X restore 359 170 pd level;
#N canvas 1536 915 450 242 pitch 1;
#X obj 95 44 inlet~;
#X obj 95 94 sigmund~ pitch;
#X obj 198 73 loadbang;
#X obj 198 98 f \$1, f 6;
#X obj 111 249 tabwrite pitch;
#X obj 92 129 moses 0;
#X obj 81 182 f 0;
#X obj 111 210 change;
#X obj 68 154 t b;
#X connect 0 0 1 0;
#X connect 1 0 5 0;
#X connect 2 0 3 0;
#X connect 3 0 4 1;
#X connect 5 0 8 0;
#X connect 5 1 7 0;
#X connect 6 0 7 0;
#X connect 7 0 4 0;
#X connect 8 0 6 0;
#X restore 432 170 pd pitch;
#N canvas 0 50 450 300 noise 0;
#X obj 107 208 tabwrite noise;
#X obj 188 158 loadbang;
#X obj 188 183 f \$1, f 6;
#X obj 107 127 zeroCrossing~ 512;
#X obj 107 91 r shmemupdate;
#X obj 58 88 inlet~;
#X connect 1 0 2 0;
#X connect 2 0 0 1;
#X connect 3 0 0 0;
#X connect 4 0 3 0;
#X connect 5 0 3 0;
#X restore 494 169 pd noise;
#X obj 157 79 r shmemupdate;
#X connect 0 0 1 0;
#X connect 0 0 7 0;
#X connect 0 0 8 0;
#X connect 0 0 10 0;
#X connect 0 0 11 0;
#X connect 0 0 12 0;
#X connect 3 0 4 0;
#X connect 9 0 6 0;
#X connect 13 0 7 0;
